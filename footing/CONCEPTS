----------------
Updated Concepts
----------------

footing
    meta (root)
        index - Index casts and projects

    workspace (root)
        init
        set/use <name>

    cast
        set/use <name>
    toolkit
        set/use <name> - Activate a toolkit
        sync <name> - Install or update tools
    project
        sync <name> - Sync with cast
        set/use <name>



repo - remote repo definition
workspace - Canal backend (always one repo)

molds - templates
casts - creations from molds that can be synced

toolkits - Prod (django, npm, node) / Dev (prod + webpack,debug-toolbar)
variables - public and private variables that can be used anywhere, especially for private infra tokens

builds - Django app libraries, Django server containers, webpack bundle, base dependencies container, Sphinx docs, poetry.lock
registries - container, package, doc registries (pypi, devpi, conda, etc), buckets, storage, footing toolkit registry (block storage).

tasks - Test suite, linting, versioning, tagging, packaging
workflows - Stringing together tasks as DAGs, periodic tasks, or triggered tasks
executors - Prod (AWS, Sentry), Local (docker), Machine (native + some docker), Private CI Runner (DB + runner), RemoteDev (DB + VM), Cron, Lambda


Local workspace - local rack + dev toolkit


--------
Concepts
--------

init - initialize a project, workspace, toolkit, or rack
destroy - destroy a project, toolkit, or rack
bootstrap - bootstrap any additional footing internal dependencies
sync - sync project, toolkit, rack, or variables
ls - list resources (casts, projects, toolkits, racks)
run - run a command in a workspace
set - set local configuration, such as the workspace
package - package and deploy a project, toolkit, or workspace

- These two commands might be the same
shell - shell into an environment
activate - activate an env


# Core constructs that can have variables injected
casts
toolkits
sheds
racks
projects (must have one repo defined)

# Static constructs

variables - secrets or other variables that can be used in casts, toolkits, racks
workspaces - combination of tools, racks, variables

--------
Examples
--------



--------------
Getting to MVP
--------------

- Initializes project from template correctly with prompts
- Bootstraps other dependencies such as terraform
- Stores local terraform config and state elsewhere. Remote terraform config can be stored in repo (stretch)
- Can install Conda in the proper location (stretch)
- Initiates local environments based on env file
- Can run commands within environment easily
- Can stand up or destroy local or remote legs
- Template that runs Django properly on DigitalOcean (or any other host) (stretch)
- Template that can pull in changes like Celery (stretch)
- Definition of a remote runner where you can easily run tests (stretch)




In the cast:

casts:
  - key: django-project
    dirs:
      - {{ footing.project_name }}
    parameters:
      - label: blah
        help_text: blah blah blah


In the project:

casts:
  # Any additional casts the project might want to use internally
  - key: django-app


projects:
  - key: hello-world
    casts:
      - url: gh://Opus10/private-django-app
        key: django-project
        version: 1.0
        parameters:
            hi: "hello"

      - url: .
        key: django-app